#include "widget.h"
#include "wid_manage.h"
//#include "lib/vts/vts.h"

#include <QApplication>

//using vts::vlog;

//! =====各类功能=====
//! 从wid_manage开始运行
//!
//! 全局控制类：wid_manage，控制登录窗口和进入后好友列表的切换
//! 登录类：wid_login，有登录和注册功能，程序的入口
//!         与服务器通信，返回登录验证是否通过
//! 注册类：wid_register，被wid_login包含，只能被等待调用
//!         负责与服务器进行注册通信，反馈注册结果
//! 列表类：wid_friends，保存好友信息
//!         通过服务器返回的好友信息对列表进行初始化（未实现）
//!         附带点击弹出窗口功能（未实现）
//! 聊天窗口类：wid_talk，这个窗口集成带有文字输入发送等所有功能...（未实现）
//!         窗口发送信息时应该加入历史记录，并带有动态调节文字显示窗口（未实现）
//!         信息接收之后发往这个窗口，应该准备接口（未实现）
//!
//! =====数据表格式=====
//!
//! （服务器记录IP和port，方便回执）
//! 客户端注册信息：#####[类型]#####[密码]#####
//! 服务器注册回执：#####[类型]#####[账号]#####[密码]#####
//!
//! （服务器记录IP和port，并与账号绑定，完成后续通信）
//! 客户端登录信息：#####[类型]#####[账号]#####[秘密]#####
//! 客户端登录回执：#####[类型]#####[登录许可]#####
//!
//! 客户端发送信息：#####[类型]#####[对方账号]#####[本人账号]#####[内容]#####
//!
//! =====链接方式=====
//! 快速链接：不会绑定账号，结构体内只记录通信IP、port和fd
//! 长期链接：会记录账号，稳定长期联系
//!
//!
//! =====服务器账号管理=====
//! 创建生成账号的工具，生成的账号确保与文件内账号不重复
//! 暂时使用文件代替数据库，文件中保存账号密码
//! 启动服务器时将账号密码加载到容器提升速度
//! 程序退出时注册账号更新到文件
//!
//! =====数据转发=====
//! 服务器无需多问，寻找账号并转发，客户端根据类型转发接收
//!
//! 文字：对方账号、数据、一次发完
//! 文件：对方账号、数据、多次发完、标记类型、
//!         标记总量、标记当前发送大小、标记累计大小
//!
int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
//    vinit_c(vlog::e_info);

#if 1
    wid_manage k;
#else
    Widget w;
//    w.show();
#endif

    return a.exec();
}
